// Flexbox based grid loops
//
// usage
/*

 */

// base grid loop
@mixin make-grid ($n) {
  @for $i from 1 through $n {

    // flex grid
    .flex-#{$i} {
      @include flex(1 1 100%);
      max-width: 100%;
    }
    // classic grid
    .col-#{$i} {
      @include flex(1 1 100%);
      max-width: 100%;
    }
  }
}

// grid widths loop
@mixin make-grid-widths($n) {
  @for $i from 1 through $n {

    // flex grow factor grid widths
    .flex-#{$i} {
    @include flex($i 1 0);
  }

    // classic grid percentage widths
    .col-#{$i} {
    @include flex(1 1 ($i * 100% / $n));
    max-width: ($i * 100% / $n);
  }
  }
}

// grid
.row {
  @include box-sizing(border-box);

  @include flex-display(flex);
  @include flex(1 1 auto);
  @include flex-flow(row wrap);
}

.column {
  @include box-sizing(border-box);
  padding: .5em;

  @include flex-display(flex);
  @include flex(1 1 auto);
  @include flex-flow(column nowrap);
}

.row.reverse {
  @include flex-direction(row-reverse);
}

.column.reverse {
  @include flex-direction(column-reverse);
}

// make grid
@include make-grid($column-number);

// flex container properties
// justify content
.start {
  @include justify-content(flex-start);
  text-align: start;
}

.center {
  @include justify-content(center);
  text-align: center;
}

.end {
  @include justify-content(flex-end);
  text-align: end;
}

.around {
  @include justify-content(space-around);
}

.between {
  @include justify-content(space-between);
}

// flex items properties
// align items
.top {
  @include align-items(flex-start);
}

.middle {
  @include align-items(center);
}

.bottom {
  @include align-items(flex-end);
}

.equal {
  @include align-items(stretch);
}

// gutter and space
.gutter {
  padding: 0;
}

.space {
  padding: $space;
}

@media screen and (min-width: 36em) {

  // make grid widths
  @include make-grid-widths($column-number);

  .gutter {
    padding: $gutter;
  }
}

@media screen and (min-width: 47em) {

}

@media screen and (min-width: 80em) {

}